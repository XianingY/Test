import pulp as pl
import pandas as pd

# 读取数据
df = pd.read_csv('r2.csv')

# 创建一个空的字典来存储货量预测
D = {}

# 遍历数据
for index, row in df.iterrows():
    # 获取分拣中心编号
    i = int(row['分拣中心'][2:])

    # 获取日期并转换为天数
    t = pd.to_datetime(row['日期']).day

    # 获取小时
    h = int(row['小时'])

    # 获取预测货量
    volume = row['预测货量']

    # 将预测货量存入字典
    if i not in D:
        D[i] = {}
    if t not in D[i]:
        D[i][t] = {}
    D[i][t][h] = volume

# 分拣中心数量
num_centers = 57

# 工作日期数量
num_days = 30

# 班次数量
num_shifts = 6

# 每个班次的开始小时
shift_hours = [
    [0, 8],    # 00:00-08:00
    [5, 13],   # 05:00-13:00
    [8, 16],   # 08:00-16:00
    [12, 20],  # 12:00-20:00
    [14, 22],  # 14:00-22:00
    [16, 24]   # 16:00-24:00，这里用24表示次日的00:00
]

# 正式工数量上限
max_regular_workers = 60

# 临时工人效
temp_worker_efficiency = 20

# 正式工人效
regular_worker_efficiency = 25

# 平均人效目标值
avg_efficiency_target = 22  # 例如设定为22包裹/小时

# 创建线性规划问题
model = pl.LpProblem("Worker_Scheduling", pl.LpMinimize)

# 创建变量
NZK = pl.LpVariable.dicts("NZK", ((i, t, k) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for k in range(1, num_shifts + 1)), cat='Binary')  # 0-1变量表示是否安排正式工
NLK = pl.LpVariable.dicts("NLK", ((i, t, k) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for k in range(1, num_shifts + 1)), cat='Binary')  # 0-1变量表示是否安排临时工
NZH = pl.LpVariable.dicts("NZH", ((i, t, h) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for h in range(24)), lowBound=0)  # 正式工人数
NLH = pl.LpVariable.dicts("NLH", ((i, t, h) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for h in range(24)), lowBound=0)  # 临时工人数
P = pl.LpVariable.dicts("P", ((i, t, h) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for h in range(24)), lowBound=0)  # 每小时人效
NT = pl.LpVariable.dicts("NT", ((i, t) for i in range(1, num_centers + 1) for t in range(1, num_days + 1)), lowBound=0)  # 每日总工人数

# 最小化总人天数
model += pl.lpSum(NT[i, t] for i in range(1, num_centers + 1) for t in range(1, num_days + 1))

# 添加约束：每天总工人数等于正式工人数加临时工人数
for i in range(1, num_centers + 1):
    for t in range(1, num_days + 1):
        model += NT[i, t] == pl.lpSum(NZH[i, t, h] + NLH[i, t, h] for h in range(24))

# 添加约束：每天实际小时人效尽量均衡
for i in range(1, num_centers + 1):
    for t in range(1, num_days + 1):
        # 计算每天的平均人效
        avg_efficiency = pl.lpSum(P[i, t, h] for h in range(24)) / 24
        for h in range(24):
            # 确保每小时人效不超过平均人效的一定比例
            model += P[i, t, h] <= avg_efficiency * 1.1
            model += P[i, t, h] >= avg_efficiency * 0.9

# 目标函数：最小化总工人天数
model += pl.lpSum((NZK[i, t, k] + NLK[i, t, k]) for i in range(1, num_centers + 1) for t in range(1, num_days + 1) for k in range(1, num_shifts+1))

# 约束条件
for i in range(1, num_centers + 1):
    for t in range(1, num_days + 1):
        # 总货量分拣能力约束
        for h in range(24):
            model += pl.lpSum(NZH[i, t, h] * regular_worker_efficiency + NLH[i, t, h] * temp_worker_efficiency for h in range(24)) >= D.get(i, {}).get(t, {}).get(h, 0)

        # 正式工人数上限约束
        sum_NZH = pl.lpSum(NZH[i, t, k] for k in range(1, num_shifts + 1))
        model += sum_NZH <= max_regular_workers

        # 排班约束：每名工作人员每天只能排一次班
        for k in range(1, num_shifts + 1):  # 添加循环定义k
            model += NZK[i, t, k] + NLK[i, t, k] <= 1

# 求解模型
model.solve()

# 创建一个空的 DataFrame 来存储结果
results = []

# 将结果存储到 DataFrame 中
for i in range(1, num_centers + 1):
    for t in range(1, num_days + 1):
        for h in range(24):
            results.append({
                '分拣中心': f'SC{i}',
                '日期': f'2023/12/{t}',
                '班次': f'{shift_hours[h // 4][0]:02d}:00-{shift_hours[h // 4 + 1][1]:02d}:00',
                '正式工人数': NZH[i, t, h].value(),
                '临时工人数': NLH[i, t, h].value()
            })

# 将结果转换为 DataFrame
results_df = pd.DataFrame(results)

# 将结果保存为 CSV 文件
results_df.to_csv('output.csv', index=False)
