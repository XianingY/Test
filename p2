import numpy as np
import pandas as pd
import networkx as nx

# 读取数据文件，做一些数据处理
edgesDf = pd.read_csv('3.csv', encoding='gbk')  # 读取边数据
futureEdgesDf = pd.read_csv('4.csv', encoding='gbk')  # 读取未来边数据
dailyPrediction = pd.read_csv('r1.csv', encoding='utf-8')  # 读取每日预测数据
avgDistribution = pd.read_csv('avg_distribution.csv', encoding='utf-8')  # 读取平均分配数据

# 构建网络图，准备进行货量调整
G = nx.from_pandas_edgelist(
    edgesDf,
    source='始发分拣中心',
    target='到达分拣中心',
    edge_attr='货量',
    create_using=nx.DiGraph()
)

# 更新网络图，根据未来边数据调整货量
for _, row in futureEdgesDf.iterrows():
    src, dst = row['始发分拣中心'], row['到达分拣中心']
    if G.has_edge(src, dst):
        specificAvg = edgesDf[
            (edgesDf['始发分拣中心'] == src) | (edgesDf['到达分拣中心'] == dst)
        ]['货量'].mean()
        G[src][dst]['货量'] = specificAvg
    else:
        specificAvg = edgesDf[
            (edgesDf['始发分拣中心'] == src) | (edgesDf['到达分拣中心'] == dst)
        ]['货量'].mean()
        G.add_edge(src, dst, 货量=specificAvg if not pd.isna(specificAvg) else 0)

# 转换日期格式，确保一致性
dailyPrediction['日期'] = pd.to_datetime(dailyPrediction['日期'])

# 创建空DataFrame用于存储更新后的货量
updatedLoads = dailyPrediction.copy()

# 将DataFrame转换为每天一个字典，方便操作
dailyLoadDict = dailyPrediction.groupby('日期')[['分拣中心', '货量']].apply(lambda x: dict(zip(x['分拣中心'], x['货量']))).to_dict()

# 遍历每天，调整货量
for date, loads in dailyLoadDict.items():
    # 遍历图中每条边，调整货量
    for (src, dst, data) in G.edges(data=True):
        if src in loads and dst in loads:
            transferAmount = data['货量']
            loads[src] = max(0, loads[src] - transferAmount)
            loads[dst] += transferAmount

    # 更新DataFrame
    for center, newLoad in loads.items():
        updatedLoads.loc[
            (updatedLoads['日期'] == date) & (updatedLoads['分拣中心'] == center), '货量'] = newLoad

updatedLoads = np.round(updatedLoads)
updatedLoads.to_csv('r3.csv', index=False)

# 将每日货量分发到每小时货量
def distributeDailyToHourly(dailyForecast, hourlyDistribution):
    forecastDetailed = dailyForecast.merge(hourlyDistribution, on=['分拣中心'], how='inner')
    forecastDetailed['预测货量'] = forecastDetailed['货量'] * forecastDetailed['小时比例']
    return forecastDetailed[['分拣中心', '日期', '小时', '预测货量']]

resultHourly = distributeDailyToHourly(updatedLoads, avgDistribution)

resultHourly = np.round(resultHourly)
resultHourly.to_csv('r4.csv', index=False)
